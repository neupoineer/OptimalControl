<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IBLL</name>
    </assembly>
    <members>
        <member name="T:IBLL.Control.ICurveManager">
            <summary>
            曲线数据访问操作接口
            </summary>
        </member>
        <member name="M:IBLL.Control.ICurveManager.GetCurveInfoById(System.Int32)">
            <summary>
            根据曲线ID获取曲线实体
            </summary>
            <param name="id">曲线ID</param>
            <returns>
            曲线实体
            </returns>
        </member>
        <member name="M:IBLL.Control.ICurveManager.GetAllCurveInfo">
            <summary>
            获取所有曲线信息
            </summary>
            <returns>曲线实体集合</returns>
        </member>
        <member name="M:IBLL.Control.ICurveManager.AddCurve(Model.Control.Curve)">
            <summary>
            添加曲线
            </summary>
            <param name="addCurve">要添加的曲线实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.ICurveManager.DeleteCurveById(System.Int32)">
            <summary>
            删除曲线
            </summary>
            <param name="id">要删除的曲线 ID</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.ICurveManager.ModifyCurve(Model.Control.Curve)">
            <summary>
            修改曲线
            </summary>
            <param name="currentCurve">要修改的曲线实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.ICurveManager.CheckCurveExist(System.String)">
            <summary>
            根据曲线名称校验曲线是否存在
            </summary>
            <param name="curveName">曲线名称</param>
            <returns>True:存在/Flase:不存在</returns>
        </member>
        <member name="T:IBLL.Control.IDataManager">
            <summary>
            数据访问操作接口
            </summary>
        </member>
        <member name="M:IBLL.Control.IDataManager.GetDataByVariableCode(System.String,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            根据变量名和设备ID获取数据
            </summary>
            <param name="variableCode">变量名</param>
            <param name="deviceID">设备ID</param>
            <param name="starTime">起始时间</param>
            <param name="endTime">截止时间</param>
            <returns>
            数据
            </returns>
        </member>
        <member name="M:IBLL.Control.IDataManager.GetLastDataByVariableCode(System.String,System.Int32)">
            <summary>
            Gets the last data by variable name.
            </summary>
            <param name="variableCode">Name of the variable.</param>
            <param name="deviceID">The device identifier.</param>
            <returns></returns>
        </member>
        <member name="M:IBLL.Control.IDataManager.AddData(System.Collections.Generic.List{Model.Control.Data})">
            <summary>
            添加数据
            </summary>
            <param name="dataCollection">要添加的数据实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.IDataManager.GetAllDataInfoByTime(System.DateTime,System.DateTime)">
            <summary>
            获得所选时间内的所有数据.
            </summary>
            <param name="starTime">起始时间</param>
            <param name="endTime">截止时间</param>
            <returns>数据表DataTable</returns>
        </member>
        <member name="M:IBLL.Control.IDataManager.GetUseRateByTime(System.String,System.DateTime,System.DateTime)">
            <summary>
            统计投用率
            </summary>
            <param name="variableCode">使能变量名</param>
            <param name="starTime">起始时间</param>
            <param name="endTime">截止时间</param>
            <returns></returns>
        </member>
        <member name="T:IBLL.Control.IDeviceManager">
            <summary>
            设备数据访问操作接口
            </summary>
        </member>
        <member name="M:IBLL.Control.IDeviceManager.GetDeviceInfoById(System.Int32)">
            <summary>
            根据设备ID获取设备实体
            </summary>
            <param name="id">设备ID</param>
            <returns>
            设备实体
            </returns>
        </member>
        <member name="M:IBLL.Control.IDeviceManager.GetAllDeviceInfo">
            <summary>
            获取所有设备信息
            </summary>
            <returns>设备实体集合</returns>
        </member>
        <member name="M:IBLL.Control.IDeviceManager.AddDevice(Model.Modbus.Device)">
            <summary>
            添加设备
            </summary>
            <param name="addDevice">要添加的设备实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.IDeviceManager.DeleteDeviceById(System.Int32)">
            <summary>
            删除设备
            </summary>
            <param name="id">要删除的设备 ID</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.IDeviceManager.ModifyDevice(Model.Modbus.Device)">
            <summary>
            修改设备
            </summary>
            <param name="currentDevice">要修改的设备实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.IDeviceManager.CheckDeviceExist(System.String)">
            <summary>
            根据设备名称校验设备是否存在
            </summary>
            <param name="deviceName">设备名称</param>
            <returns>True:存在/Flase:不存在</returns>
        </member>
        <member name="T:IBLL.Control.IRuleManager">
            <summary>
            规则数据访问操作接口
            </summary>
        </member>
        <member name="M:IBLL.Control.IRuleManager.GetRuleInfoById(System.Int32)">
            <summary>
            根据规则ID获取规则实体
            </summary>
            <param name="id">规则ID</param>
            <returns>
            规则实体
            </returns>
        </member>
        <member name="M:IBLL.Control.IRuleManager.GetAllRuleInfo">
            <summary>
            获取所有规则信息
            </summary>
            <returns>规则实体集合</returns>
        </member>
        <member name="M:IBLL.Control.IRuleManager.GetRuleInfoEnabled">
            <summary>
            获取有效的规则实体
            </summary>
            <returns>规则实体</returns>
        </member>
        <member name="M:IBLL.Control.IRuleManager.AddRule(Model.Control.Rule)">
            <summary>
            添加规则
            </summary>
            <param name="addRule">要添加的规则实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.IRuleManager.DeleteRuleById(System.Int32)">
            <summary>
            删除规则
            </summary>
            <param name="id">要删除的规则 ID</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.IRuleManager.ModifyRule(Model.Control.Rule)">
            <summary>
            修改规则
            </summary>
            <param name="currentRule">要修改的规则实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.IRuleManager.CheckRuleExist(System.String)">
            <summary>
            根据规则名称校验规则是否存在
            </summary>
            <param name="ruleName">规则名称</param>
            <returns>True:存在/Flase:不存在</returns>
        </member>
        <member name="T:IBLL.Control.IVariableManager">
            <summary>
            变量数据访问操作接口
            </summary>
        </member>
        <member name="M:IBLL.Control.IVariableManager.GetVariableInfoById(System.Int32)">
            <summary>
            根据变量ID获取变量实体
            </summary>
            <param name="id">变量ID</param>
            <returns>
            变量实体
            </returns>
        </member>
        <member name="M:IBLL.Control.IVariableManager.GetVariableInfoByCode(System.String)">
            <summary>
            根据变量ID获取变量实体
            </summary>
            <param name="code">变量名</param>
            <returns>
            变量实体
            </returns>
        </member>
        <member name="M:IBLL.Control.IVariableManager.GetAllVariableInfo">
            <summary>
            获取所有变量信息
            </summary>
            <returns>变量实体集合</returns>
        </member>
        <member name="M:IBLL.Control.IVariableManager.GetVariableByDeviceId(System.Int32)">
            <summary>
            获取Device的所有变量信息
            </summary>
            <returns>变量实体集合</returns>
        </member>
        <member name="M:IBLL.Control.IVariableManager.AddVariable(Model.Control.Variable)">
            <summary>
            添加变量
            </summary>
            <param name="addVariable">要添加的变量实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.IVariableManager.DeleteVariableById(System.Int32)">
            <summary>
            删除变量
            </summary>
            <param name="id">要删除的变量 ID</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.IVariableManager.DeleteVariableByDeviceId(System.Int32)">
            <summary>
            按照设备号删除变量
            </summary>
            <param name="deviceID">要删除的变量的设备号</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.IVariableManager.ModifyVariable(Model.Control.Variable)">
            <summary>
            修改变量
            </summary>
            <param name="currentVariable">要修改的变量实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.Control.IVariableManager.CheckVariableExist(System.String)">
            <summary>
            根据变量名称校验变量是否存在
            </summary>
            <param name="variableName">变量名称</param>
            <returns>True:存在/Flase:不存在</returns>
        </member>
        <member name="T:IBLL.ILogManager">
            <summary>
            日志数据访问操作接口
            </summary>
        </member>
        <member name="M:IBLL.ILogManager.GetLogInfoByTime(System.DateTime,System.DateTime)">
            <summary>
            根据日志时间获取日志实体
            </summary>
            <param name="startTime">日志开始时间.</param>
            <param name="endTime">日志结束时间.</param>
            <returns>
            日志实体
            </returns>
        </member>
        <member name="M:IBLL.ILogManager.GetAllLogInfo">
            <summary>
            获取所有日志信息
            </summary>
            <returns>日志实体集合</returns>
        </member>
        <member name="M:IBLL.ILogManager.GetLastLogInfos(System.Int32,System.Boolean)">
            <summary>
            获取最新的日志信息
            </summary>
            <param name="logCount">日志条数.</param>
            <param name="state">日志类型.</param>
            <returns>
            日志实体集合
            </returns>
        </member>
        <member name="M:IBLL.ILogManager.AddLog(Model.Log)">
            <summary>
            添加日志
            </summary>
            <param name="addLog">要添加的日志实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="T:IBLL.IOperatorManager">
            <summary>
            操作员业务逻辑管理接口
            </summary>
        </member>
        <member name="M:IBLL.IOperatorManager.GetOperatorInfoByName(System.String,System.String)">
            <summary>
            根据操作员名称和密码获取操作员实体
            </summary>
            <param name="name">操作员名称</param>
            <param name="pwd">操作员密码</param>
            <returns>操作员实体</returns>
        </member>
        <member name="M:IBLL.IOperatorManager.GetAllOperatorInfo">
            <summary>
            获取所有操作员信息
            </summary>
            <returns>操作员实体集合</returns>
        </member>
        <member name="M:IBLL.IOperatorManager.AddOperator(Model.Operator)">
            <summary>
            添加操作员
            </summary>
            <param name="addOperator">要添加的操作员实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.IOperatorManager.DeleteOperatorByID(System.Int32)">
            <summary>
            删除操作员
            </summary>
            <param name="id">要删除的操作员 ID</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.IOperatorManager.ModifyOperator(Model.Operator)">
            <summary>
            修改操作员
            </summary>
            <param name="currentOperator">要修改的操作员实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.IOperatorManager.CheckOperatorExist(System.String)">
            <summary>
            根据操作员名称校验操作员是否存在
            </summary>
            <param name="operatorName">操作员名称</param>
            <returns>True:存在/Flase:不存在</returns>
        </member>
        <member name="T:IBLL.IRightsGroupManager">
            <summary>
            权限组业务逻辑管理接口
            </summary>
        </member>
        <member name="M:IBLL.IRightsGroupManager.GetAllRightsGroupInfo">
            <summary>
            获取所有权限组信息
            </summary>
            <returns>权限组实体集合</returns>
        </member>
        <member name="M:IBLL.IRightsGroupManager.CheckRightsGroupExist(System.String)">
            <summary>
            根据权限组名称校验权限组是否已经存在
            </summary>
            <param name="rightsGroupName">权限组名称</param>
            <returns>True:存在/False:不存在</returns>
        </member>
        <member name="M:IBLL.IRightsGroupManager.AddRightsGroup(Model.RightsGroup)">
            <summary>
            添加权限组
            </summary>
            <param name="addRightsGroup">要添加的权限组实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.IRightsGroupManager.DeleteRightsGroupByID(System.Int32)">
            <summary>
            删除权限组
            </summary>
            <param name="id">要删除的权限组 ID</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.IRightsGroupManager.ModifyRightsGroup(Model.RightsGroup)">
            <summary>
            修改权限组
            </summary>
            <param name="currentRightsGroup">要修改的权限组实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="T:IBLL.IRightsRelationManager">
            <summary>
            权限关系业务逻辑管理接口
            </summary>
        </member>
        <member name="M:IBLL.IRightsRelationManager.AddRightsRelation(Model.RightsRelation)">
            <summary>
            添加单个权限关系
            </summary>
            <param name="rightsRelation">权限关系实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.IRightsRelationManager.DeleteRightsRelationById(System.Int32)">
            <summary>
            根据权限关系 ID 删除权限关系
            </summary>
            <param name="id">权限关系 ID</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.IRightsRelationManager.DeleteRightsRelationByOperatorId(System.Int32)">
            <summary>
            根据操作员 ID 删除对应的所有权限关系
            </summary>
            <param name="operatorId">操作员 ID</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.IRightsRelationManager.ModifyRightsRelation(Model.RightsRelation)">
            <summary>
            修改单个权限关系
            </summary>
            <param name="rightsRelation">权限关系实体</param>
            <returns>True:成功/False:失败</returns>
        </member>
        <member name="M:IBLL.IRightsRelationManager.GetAllRightsRelation">
            <summary>
            获取所有的权限关系集合
            </summary>
            <returns>权限关系集合</returns>
        </member>
        <member name="M:IBLL.IRightsRelationManager.GetRightsRelationByOperatorId(System.Int32)">
            <summary>
            根据操作员 ID 获取对应的所有权限关系
            </summary>
            <param name="id">操作员 ID</param>
            <returns>权限关系集合</returns>
        </member>
        <member name="M:IBLL.IRightsRelationManager.GetRightsRelationCountByRightsGroupId(System.Int32)">
            <summary>
            根据权限组 ID 获取与此权限组相关的权限关系数量
            </summary>
            <param name="id">权限组 ID</param>
            <returns>权限关系数量</returns>
        </member>
    </members>
</doc>
